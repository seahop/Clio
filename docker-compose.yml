services:
  frontend:
    build: 
      context: ./frontend
      args:
        - NODE_ENV=production
    expose:
      - "3000"
    volumes:
      - type: bind
        source: ./certs/server.crt
        target: /app/certs/server.crt
        read_only: true
      - type: bind
        source: ./certs/server.key
        target: /app/certs/server.key
        read_only: true
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=production
      - HTTPS=true
      - SSL_CRT_FILE=/app/certs/server.crt
      - SSL_KEY_FILE=/app/certs/server.key
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - TZ=UTC
    networks:
      - frontend-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "--no-check-certificate", "https://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build: ./backend
    expose:
      - "3001"
    volumes:
      - type: bind
        source: ./backend/data
        target: /app/data
      - type: bind
        source: ./certs/server.crt
        target: /app/certs/server.crt
        read_only: true
      - type: bind
        source: ./certs/server.key
        target: /app/certs/server.key
        read_only: true
      - type: bind
        source: ./certs/backend.crt
        target: /app/certs/backend.crt
        read_only: true
      - type: bind
        source: ./certs/backend.key
        target: /app/certs/backend.key
        read_only: true
      - type: bind
        source: ./certs/redis.crt
        target: /app/certs/redis.crt
        read_only: true
      - type: bind
        source: ./certs/redis.key
        target: /app/certs/redis.key
        read_only: true
      - type: bind
        source: ./certs/db.crt
        target: /app/certs/db.crt
        read_only: true
      - type: bind
        source: ./certs/db.key
        target: /app/certs/db.key
        read_only: true
      - type: bind
        source: ./backend/exports
        target: /app/exports
      - evidence_files:/app/evidence
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATA_PATH=/app/data/logs.json
      - FRONTEND_URL=https://frontend:3000
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - SSL_CRT_FILE=certs/server.crt
      - SSL_KEY_FILE=certs/server.key
      - TZ=UTC
      - PGTZ=UTC
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--no-check-certificate", "-q", "-O", "-", "https://localhost:3001/api/csrf-token"]
      interval: 30s
      timeout: 10s
      retries: 3

  relation-service:
    build: ./relation-service
    expose:
      - "3002"
    volumes:
      - type: bind
        source: ./relation-service/data
        target: /app/src/data
      - type: bind
        source: ./certs/server.crt
        target: /app/certs/server.crt
        read_only: true
      - type: bind
        source: ./certs/server.key
        target: /app/certs/server.key
        read_only: true
      - type: bind
        source: ./certs/backend.crt
        target: /app/certs/backend.crt
        read_only: true
      - type: bind
        source: ./certs/backend.key
        target: /app/certs/backend.key
        read_only: true
      - type: bind
        source: ./relation-service/logs
        target: /app/src/logs
    env_file:
      - ./relation-service/.env
    environment:
      - NODE_ENV=production
      - PORT=3002
      - FRONTEND_URL=https://frontend:3000
      - POSTGRES_HOST=db
      - POSTGRES_DB=redteamlogger 
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - SSL_CRT_FILE=certs/server.crt
      - SSL_KEY_FILE=certs/server.key
      - TZ=UTC
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
    - frontend-network
    - backend-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--no-check-certificate", "-q", "-O", "-", "https://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.4.2-alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - type: bind
        source: ./certs/redis.crt
        target: /certs/redis.crt
        read_only: true
      - type: bind
        source: ./certs/redis.key
        target: /certs/redis.key
        read_only: true
      - type: bind
        source: ./certs/server.crt
        target: /certs/server.crt
        read_only: true
    env_file:
      - ./redis/.env
    environment:
      - TZ=UTC
    command: >
      redis-server 
      --requirepass "${REDIS_PASSWORD}" 
      --appendonly yes 
      --save 60 1 
      --maxmemory 512mb 
      --maxmemory-policy noeviction
      --tls-port 6379
      --port 0
      --tls-cert-file /certs/redis.crt
      --tls-key-file /certs/redis.key
      --tls-ca-cert-file /certs/server.crt
      --tls-auth-clients no
    networks:
      - backend-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "--tls", "--cert", "/certs/redis.crt", "--key", "/certs/redis.key", "--cacert", "/certs/server.crt", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:17-alpine
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
      - type: bind
        source: ./certs/server.crt
        target: /tmp/certs/server.crt
        read_only: true
      - type: bind
        source: ./certs/server.key
        target: /tmp/certs/server.key
        read_only: true
      - type: bind
        source: ./certs/db.crt
        target: /tmp/certs/db.crt
        read_only: true
      - type: bind
        source: ./certs/db.key
        target: /tmp/certs/db.key
        read_only: true
    env_file:
      - ./db/.env
    environment:
      - POSTGRES_SSL=${POSTGRES_SSL:-true}
      - TZ=UTC
      - PGTZ=UTC
    networks:
      - backend-network
    command: postgres -c timezone=UTC -c log_timezone=UTC
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nginx-proxy:
    build: ./nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - type: bind
        source: ./certs/server.crt
        target: /etc/nginx/certs/server.crt
        read_only: true
      - type: bind
        source: ./certs/server.key
        target: /etc/nginx/certs/server.key
        read_only: true
      - type: bind
        source: ${LETSENCRYPT_CERT_PATH:-./certs/server.crt}
        target: /etc/nginx/certs/letsencrypt-fullchain.pem
        read_only: true
      - type: bind
        source: ${LETSENCRYPT_KEY_PATH:-./certs/server.key}
        target: /etc/nginx/certs/letsencrypt-privkey.pem
        read_only: true
    environment:
      - TZ=UTC
    networks:
      - frontend-network
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  evidence_files:
    driver: local

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true